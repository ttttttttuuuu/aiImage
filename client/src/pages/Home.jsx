import React, { useState, useEffect } from "react";
import { Loader, Card, FormField } from "../components";
import { FaFireAlt, url } from "../assets";
const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [searchResults, setSearchResults] = useState([]);
  const [filterResults, setFilterResults] = useState([]);
  const [filterState, setFilterState] = useState("New");
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchText, setSearchText] = useState("");

  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${url}/api/v1/post`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });
      // console.log("res", response);
      if (response.ok) {
        const result = await response.json();

        setAllPosts(result.data);
        setFilterResults(result.data.reverse());
      }
    } catch (error) {
      console.log(error);
    } finally {
      setLoading(false);
    }
  };
  useEffect(() => {
    fetchPosts();
  }, []);

  const postSort = (s) => {
    if (s === "New") {
      setFilterState("Recent");
      let newPost = allPosts;
      newPost.sort(function (a, b) {
        return b.count - a.count;
      });
      setFilterResults(newPost);
    } else {
      setFilterState("New");
      fetchPosts();
      // let newPost = allPosts;
      // newPost.sort(function (a, b) {
      //   let time1 = new Date(b.created_time).getTime() * 1000;
      //   let time2 = new Date(a.created_time).getTime() * 1000;
      //   console.log(time1 - time2);
      //   return time1 - time2;
      // });
    }
  };
  useEffect(() => {}, [filterState, filterResults, allPosts]);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);
    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (post) =>
            post.name.toLowerCase().includes(searchText.toLowerCase()) ||
            post.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchResults(searchResult);
      }, 500)
    );
  };

  const RenderCards = ({ data, title }) => {
    if (data.length > 0) {
      return data.map((post) => <Card key={post._id} {...post} />);
    }

    return (
      <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">
        {title}
      </h2>
    );
  };

  return (
    <main className="sm:p-8 p-8  w-full bg-[#f9fafe] dark:bg-[#252525] dark:text-white min-h-[calc(100vh - 73px)]">
      <section className="max-w-7xl mx-auto">
        <div>
          <h1 className="font-extrabold text-[#222328] dark:text-white text-[32px] ">
            Community Showcase
          </h1>
          <p className="mt-2 text-[#666475] text-[16px] max-w-[500px]">
            Browser through a collection of imaginative and visually stunning
            images generated by DALL-E AI.We welcome all creators to join in the
            fun and create your own AI art with us â€“ we might even showcase them
            here!
          </p>
        </div>
        <div className="mt-16 ">
          <FormField
            LabelName="Search posts"
            // ButtonName="Recent"
            type="text"
            name="text"
            placeholder="Search posts"
            value={searchText}
            handleChange={handleSearchChange}
          />
        </div>
        <div className="w-full flex justify-end  mt-5">
          <div
            className="flex w-[80px]  text-sm font-medium dark:bg-[#303030]  border border-orange-300  rounded-xl text-gray-900 dark:text-orange-300 p-2 cursor-pointer"
            onClick={() => postSort(filterState)}
          >
            <div>
              <FaFireAlt className="dark:text-orange-300 mt-0.5 " />
            </div>
            <div>{filterState}</div>
          </div>
        </div>
        <div className="mt-1 ">
          {loading ? (
            <div className="flex justify-center items-center">
              <Loader />
            </div>
          ) : (
            <div>
              {searchText && (
                <h2 className="font-medium text-[#666e75] text-xl mb-3">
                  Showing results for{" "}
                  <span className="text-[#222328]">{searchText}</span>
                </h2>
              )}
              <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
                {searchText ? (
                  <RenderCards
                    data={searchResults}
                    title="No search results found"
                  />
                ) : (
                  <RenderCards data={filterResults} title="No posts found" />
                )}
              </div>
            </div>
          )}
        </div>
      </section>
    </main>
  );
};

export default Home;
